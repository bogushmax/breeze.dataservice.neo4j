define(['breeze'], function (breeze) {
    breeze.config.initializeAdapterInstance('dataService', 'neo4j', true);
    breeze.config.initializeAdapterInstance('modelLibrary', 'ko', true);

    var helper = new breeze.config.MetadataHelper('schema', breeze.AutoGeneratedKeyType.Identity);
    var store = new breeze.MetadataStore({
        namingConvention: breeze.NamingConvention.none
    });

    helper.addDataService(store, 'schema');
    helper.addTypeToStore(store, {
        shortName: 'Class',
        defaultResourceName: 'Classes',
        dataProperties: {
            id: {
                dataType: breeze.DataType.Int32,
                isPartOfKey: true
            },
            name: {
                maxLength: 4000
            }
        },
        navigationProperties: {
            properties: {
                entityTypeName: 'Property',
                associationName: 'HAS PROPERTY',
                isScalar: false
            },
        }
    });
    helper.addTypeToStore(store, {
        shortName: 'Property',
        defaultResourceName: 'Properties',
        dataProperties: {
            id: {
                dataType: breeze.DataType.Int32,
                isPartOfKey: true
            },
            name: {
                maxLength: 4000,
            },
            classID: {
                dataType: breeze.DataType.Int32
            }
        },
        navigationProperties: {
            class: {
                entityTypeName: 'Class',
                associationName: 'HAS PROPERTY',
                foreignKeyNames: ['classID'],
                isScalar: true
            }
        }
    });

    describe('neo4j breeze.js (simple tests)', function () {
        var manager;

        beforeEach(function () {
            manager = new breeze.EntityManager({
                dataService: new breeze.DataService({
                    serviceName: 'http://192.168.1.20:7474',
                    hasServerMetadata: false
                }),
                metadataStore: store
            });
            manager.saveOptions = new breeze.SaveOptions({ allowConcurrentSaves: true });
            //jasmine.Ajax.install();
        });

        afterEach(function () {
            manager = null;
            //jasmine.Ajax.uninstall();
        });

        it('get entities', function (done) {
            var query = breeze.EntityQuery.from('Classes').expand('Properties');
            manager.executeQuery(query).then(function () {
                expect(true).toBe(true);
                done();
            });
        });

        it('create entity and save', function (done) {
            var newClass = manager.createEntity('Class', { name: 'Any class name' });
            manager.addEntity(newClass);
            manager.saveChanges().then(function () {
                expect(true).toBe(true);
                done();
            });
        });

        it('create entity with relationship and save', function (done) {
            var newClass = manager.createEntity('Class', { name: 'Any class name' });
            var newProperty = manager.createEntity('Property', { name: 'Description' });
            newClass.properties.push(newProperty);
            manager.addEntity(newClass);
            manager.addEntity(newProperty);
            manager.saveChanges().then(function () {
                expect(true).toBe(true);
                done();
            });
        });

        it('delete entity and save', function () {
            var query = breeze.EntityQuery.from('Classes').expand('Properties');
            var em = manager;
            em.executeQuery(query).then(function (data) {
                data.results[0].entityAspect.setDeleted();
                em.saveChanges().then(function (_) {
                    expect(true).toBe(true);
                    done();
                }, function (_) { console.info(_) });
            });
        });
    });

});